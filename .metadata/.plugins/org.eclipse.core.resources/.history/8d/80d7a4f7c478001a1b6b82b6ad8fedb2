package spring.web.controller;

import java.io.File;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import spring.web.svc.AdvertiseService;
import spring.web.util.FileUtils;
import spring.web.vo.AdvertiseVO;
import spring.web.vo.PageMaker;
import spring.web.vo.SearchCriteria;

@Controller
@RequestMapping("/advertise/*")
public class AdvertiseController {

	@Autowired
	AdvertiseService service;

	 
	@Resource(name = "uploadPath")
	private String uploadPath;

	/* 관리자 식재료 목록페이지로 이동 */
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public String adminAdList(Model model, AdvertiseVO vo, @ModelAttribute("scri") SearchCriteria scri) throws Exception{
		List<AdvertiseVO> adList = service.adList(scri);
		model.addAttribute("adList", adList);

		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(scri);
		pageMaker.setTotalCount(service.listCount(scri));

		model.addAttribute("pageMaker", pageMaker);
		return "advertise/advertiseList";
	}

	/* 관리자 식재료 등록페이지로 이동 */
	@RequestMapping(value = "/registView", method = RequestMethod.GET)
	public void adWriteView(Model model) {
	}


	@RequestMapping(value = "/regist", method = RequestMethod.POST)
	public String adRegister(AdvertiseVO vo, MultipartFile file) throws Exception {

		String imgUploadPath = uploadPath + File.separator + "imgUpload";
		String ymdPath = FileUtils.calcPath(imgUploadPath);
		String fileName = null;

		if (file != null) {
			fileName = FileUtils.fileUpload(imgUploadPath, file.getOriginalFilename(), file.getBytes(), ymdPath);

			vo.setAdImg(File.separator + "imgUpload" + ymdPath + File.separator + fileName);
			// gdsThumbImg에 썸네일 파일 경로 + 썸네일 파일명 저장
			vo.setAdThumbImg(
					File.separator + "imgUpload" + ymdPath + File.separator + "s" + File.separator + "s_" + fileName);
		} else {
			fileName = File.separator + "images" + File.separator + "none.png";
			// 미리 준비된 none.png파일을 대신 출력함

			vo.setAdImg(fileName);
			vo.setAdThumbImg(fileName);
		}

		vo.setAdImg(File.separator + "imgUpload" + ymdPath + File.separator + fileName);
		vo.setAdThumbImg(
				File.separator + "imgUpload" + ymdPath + File.separator + "s" + File.separator + "s_" + fileName);

		service.adRegist(vo);
		return "redirect:/advertise/advertiseList";
	}


	@RequestMapping(value = "/readView", method = RequestMethod.GET)
	public String adRead(@RequestParam("n") int adNum, @ModelAttribute("scri") SearchCriteria scri, Model model) throws Exception{
		AdvertiseVO advertise = service.adRead(adNum);
		model.addAttribute("advertise", advertise);

		return "advertise/readView";
	}

	/* 관리자 식재료 수정 페이지로 이동 */
	@RequestMapping(value = "/updateView", method = RequestMethod.GET)
	public String adUpdateView(@RequestParam("n") int adNum, @ModelAttribute("scri") SearchCriteria scri, Model model) throws Exception{

		AdvertiseVO advertise = service.adRead(adNum);
		model.addAttribute("advertise", advertise);

		return "advertise/updateView";
	}

	// 식재료 수정
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public String adUpdate(AdvertiseVO vo, MultipartFile file, HttpServletRequest req, @ModelAttribute("scri") SearchCriteria scri, RedirectAttributes rttr) throws Exception {

		// 새로운 파일이 등록되었는지 확인
		if (file.getOriginalFilename() != null && file.getOriginalFilename() != "") {
			// 기존 파일을 삭제
			new File(uploadPath + req.getParameter("adImg")).delete();
			new File(uploadPath + req.getParameter("adThumbImg")).delete();

			// 새로 첨부한 파일을 등록
			String imgUploadPath = uploadPath + File.separator + "imgUpload";
			String ymdPath = FileUtils.calcPath(imgUploadPath);
			String fileName = FileUtils.fileUpload(imgUploadPath, file.getOriginalFilename(), file.getBytes(), ymdPath);

			vo.setAdImg(File.separator + "imgUpload" + ymdPath + File.separator + fileName);
			vo.setAdThumbImg(
					File.separator + "imgUpload" + ymdPath + File.separator + "s" + File.separator + "s_" + fileName);

		} else { // 새로운 파일이 등록되지 않았다면
			// 기존 이미지를 그대로 사용
			vo.setAdImg(req.getParameter("adImg"));
			vo.setAdThumbImg(req.getParameter("adThumbImg"));

		}

		service.update(vo);

		rttr.addAttribute("page", scri.getPage());
		rttr.addAttribute("perPageNum", scri.getPerPageNum());
		rttr.addAttribute("searchType", scri.getSearchType());
		rttr.addAttribute("keyword", scri.getKeyword());
		
		return "redirect:/advertise/list";
	}

	@RequestMapping(value = "/delete")
	public String adDelete(@RequestParam("n") int adNum, @ModelAttribute("scri") SearchCriteria scri, RedirectAttributes rttr) throws Exception {

		service.delete(adNum);

		return "redirect:/advertise/list";
	}
}
